State 0:
input' -> . input [ # ]
-- On B shift to state 1
-- On A shift to state 2
-- On input shift to state 5
-- On expression shift to state 6
-- On abstring shift to state 8

State 1:
abstring -> B . abstring [ EOF C ]
abstring -> B . [ EOF C ]
-- On B shift to state 1
-- On A shift to state 2
-- On abstring shift to state 4
-- On EOF reduce production abstring -> B 
-- On C reduce production abstring -> B 

State 2:
abstring -> A . abstring [ EOF C ]
abstring -> A . [ EOF C ]
-- On B shift to state 1
-- On A shift to state 2
-- On abstring shift to state 3
-- On EOF reduce production abstring -> A 
-- On C reduce production abstring -> A 

State 3:
abstring -> A abstring . [ EOF C ]
-- On EOF reduce production abstring -> A abstring 
-- On C reduce production abstring -> A abstring 

State 4:
abstring -> B abstring . [ EOF C ]
-- On EOF reduce production abstring -> B abstring 
-- On C reduce production abstring -> B abstring 

State 5:
input' -> input . [ # ]
-- On # accept input

State 6:
input -> expression . EOF [ # ]
-- On EOF shift to state 7

State 7:
input -> expression EOF . [ # ]
-- On # reduce production input -> expression EOF 

State 8:
expression -> abstring . C abstring [ EOF ]
-- On C shift to state 9

State 9:
expression -> abstring C . abstring [ EOF ]
-- On B shift to state 1
-- On A shift to state 2
-- On abstring shift to state 10

State 10:
expression -> abstring C abstring . [ EOF ]
-- On EOF reduce production expression -> abstring C abstring 

