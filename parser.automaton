State 0:
## Known stack suffix:
##
## LR(1) items:
automaton' -> . automaton [ # ]
## Transitions:
-- On INPUT_SYMBOLS_HEADER shift to state 1
-- On inputsymbols shift to state 7
-- On declarations shift to state 30
-- On automaton shift to state 157
## Reductions:

State 1:
## Known stack suffix:
## INPUT_SYMBOLS_HEADER
## LR(1) items:
inputsymbols -> INPUT_SYMBOLS_HEADER . COLON suite_min_nonvide [ STACK_SYMBOLS_HEADER ]
## Transitions:
-- On COLON shift to state 2
## Reductions:

State 2:
## Known stack suffix:
## INPUT_SYMBOLS_HEADER COLON
## LR(1) items:
inputsymbols -> INPUT_SYMBOLS_HEADER COLON . suite_min_nonvide [ STACK_SYMBOLS_HEADER ]
## Transitions:
-- On LC_LETTER shift to state 3
-- On suite_min_nonvide shift to state 6
## Reductions:

State 3:
## Known stack suffix:
## LC_LETTER
## LR(1) items:
suite_min_nonvide -> LC_LETTER . [ STACK_SYMBOLS_HEADER ]
suite_min_nonvide -> LC_LETTER . COMMA suite_min_nonvide [ STACK_SYMBOLS_HEADER ]
## Transitions:
-- On COMMA shift to state 4
## Reductions:
-- On STACK_SYMBOLS_HEADER
--   reduce production suite_min_nonvide -> LC_LETTER

State 4:
## Known stack suffix:
## LC_LETTER COMMA
## LR(1) items:
suite_min_nonvide -> LC_LETTER COMMA . suite_min_nonvide [ STACK_SYMBOLS_HEADER ]
## Transitions:
-- On LC_LETTER shift to state 3
-- On suite_min_nonvide shift to state 5
## Reductions:

State 5:
## Known stack suffix:
## LC_LETTER COMMA suite_min_nonvide
## LR(1) items:
suite_min_nonvide -> LC_LETTER COMMA suite_min_nonvide . [ STACK_SYMBOLS_HEADER ]
## Transitions:
## Reductions:
-- On STACK_SYMBOLS_HEADER
--   reduce production suite_min_nonvide -> LC_LETTER COMMA suite_min_nonvide

State 6:
## Known stack suffix:
## INPUT_SYMBOLS_HEADER COLON suite_min_nonvide
## LR(1) items:
inputsymbols -> INPUT_SYMBOLS_HEADER COLON suite_min_nonvide . [ STACK_SYMBOLS_HEADER ]
## Transitions:
## Reductions:
-- On STACK_SYMBOLS_HEADER
--   reduce production inputsymbols -> INPUT_SYMBOLS_HEADER COLON suite_min_nonvide

State 7:
## Known stack suffix:
## inputsymbols
## LR(1) items:
declarations -> inputsymbols . stacksymbols states initialstate initialstack [ TRANSITIONS_HEADER PROGRAM_HEADER ]
## Transitions:
-- On STACK_SYMBOLS_HEADER shift to state 8
-- On stacksymbols shift to state 14
## Reductions:

State 8:
## Known stack suffix:
## STACK_SYMBOLS_HEADER
## LR(1) items:
stacksymbols -> STACK_SYMBOLS_HEADER . COLON suite_maj_nonvide [ STATES_HEADER ]
## Transitions:
-- On COLON shift to state 9
## Reductions:

State 9:
## Known stack suffix:
## STACK_SYMBOLS_HEADER COLON
## LR(1) items:
stacksymbols -> STACK_SYMBOLS_HEADER COLON . suite_maj_nonvide [ STATES_HEADER ]
## Transitions:
-- On UC_LETTER shift to state 10
-- On suite_maj_nonvide shift to state 13
## Reductions:

State 10:
## Known stack suffix:
## UC_LETTER
## LR(1) items:
suite_maj_nonvide -> UC_LETTER . [ STATES_HEADER ]
suite_maj_nonvide -> UC_LETTER . COMMA suite_maj_nonvide [ STATES_HEADER ]
## Transitions:
-- On COMMA shift to state 11
## Reductions:
-- On STATES_HEADER
--   reduce production suite_maj_nonvide -> UC_LETTER

State 11:
## Known stack suffix:
## UC_LETTER COMMA
## LR(1) items:
suite_maj_nonvide -> UC_LETTER COMMA . suite_maj_nonvide [ STATES_HEADER ]
## Transitions:
-- On UC_LETTER shift to state 10
-- On suite_maj_nonvide shift to state 12
## Reductions:

State 12:
## Known stack suffix:
## UC_LETTER COMMA suite_maj_nonvide
## LR(1) items:
suite_maj_nonvide -> UC_LETTER COMMA suite_maj_nonvide . [ STATES_HEADER ]
## Transitions:
## Reductions:
-- On STATES_HEADER
--   reduce production suite_maj_nonvide -> UC_LETTER COMMA suite_maj_nonvide

State 13:
## Known stack suffix:
## STACK_SYMBOLS_HEADER COLON suite_maj_nonvide
## LR(1) items:
stacksymbols -> STACK_SYMBOLS_HEADER COLON suite_maj_nonvide . [ STATES_HEADER ]
## Transitions:
## Reductions:
-- On STATES_HEADER
--   reduce production stacksymbols -> STACK_SYMBOLS_HEADER COLON suite_maj_nonvide

State 14:
## Known stack suffix:
## inputsymbols stacksymbols
## LR(1) items:
declarations -> inputsymbols stacksymbols . states initialstate initialstack [ TRANSITIONS_HEADER PROGRAM_HEADER ]
## Transitions:
-- On STATES_HEADER shift to state 15
-- On states shift to state 21
## Reductions:

State 15:
## Known stack suffix:
## STATES_HEADER
## LR(1) items:
states -> STATES_HEADER . COLON suite_chiffres_nonvide [ INIT_STATE_HEADER ]
## Transitions:
-- On COLON shift to state 16
## Reductions:

State 16:
## Known stack suffix:
## STATES_HEADER COLON
## LR(1) items:
states -> STATES_HEADER COLON . suite_chiffres_nonvide [ INIT_STATE_HEADER ]
## Transitions:
-- On DIGIT shift to state 17
-- On suite_chiffres_nonvide shift to state 20
## Reductions:

State 17:
## Known stack suffix:
## DIGIT
## LR(1) items:
suite_chiffres_nonvide -> DIGIT . [ INIT_STATE_HEADER ]
suite_chiffres_nonvide -> DIGIT . COMMA suite_chiffres_nonvide [ INIT_STATE_HEADER ]
## Transitions:
-- On COMMA shift to state 18
## Reductions:
-- On INIT_STATE_HEADER
--   reduce production suite_chiffres_nonvide -> DIGIT

State 18:
## Known stack suffix:
## DIGIT COMMA
## LR(1) items:
suite_chiffres_nonvide -> DIGIT COMMA . suite_chiffres_nonvide [ INIT_STATE_HEADER ]
## Transitions:
-- On DIGIT shift to state 17
-- On suite_chiffres_nonvide shift to state 19
## Reductions:

State 19:
## Known stack suffix:
## DIGIT COMMA suite_chiffres_nonvide
## LR(1) items:
suite_chiffres_nonvide -> DIGIT COMMA suite_chiffres_nonvide . [ INIT_STATE_HEADER ]
## Transitions:
## Reductions:
-- On INIT_STATE_HEADER
--   reduce production suite_chiffres_nonvide -> DIGIT COMMA suite_chiffres_nonvide

State 20:
## Known stack suffix:
## STATES_HEADER COLON suite_chiffres_nonvide
## LR(1) items:
states -> STATES_HEADER COLON suite_chiffres_nonvide . [ INIT_STATE_HEADER ]
## Transitions:
## Reductions:
-- On INIT_STATE_HEADER
--   reduce production states -> STATES_HEADER COLON suite_chiffres_nonvide

State 21:
## Known stack suffix:
## inputsymbols stacksymbols states
## LR(1) items:
declarations -> inputsymbols stacksymbols states . initialstate initialstack [ TRANSITIONS_HEADER PROGRAM_HEADER ]
## Transitions:
-- On INIT_STATE_HEADER shift to state 22
-- On initialstate shift to state 25
## Reductions:

State 22:
## Known stack suffix:
## INIT_STATE_HEADER
## LR(1) items:
initialstate -> INIT_STATE_HEADER . COLON DIGIT [ INIT_STACK_HEADER ]
## Transitions:
-- On COLON shift to state 23
## Reductions:

State 23:
## Known stack suffix:
## INIT_STATE_HEADER COLON
## LR(1) items:
initialstate -> INIT_STATE_HEADER COLON . DIGIT [ INIT_STACK_HEADER ]
## Transitions:
-- On DIGIT shift to state 24
## Reductions:

State 24:
## Known stack suffix:
## INIT_STATE_HEADER COLON DIGIT
## LR(1) items:
initialstate -> INIT_STATE_HEADER COLON DIGIT . [ INIT_STACK_HEADER ]
## Transitions:
## Reductions:
-- On INIT_STACK_HEADER
--   reduce production initialstate -> INIT_STATE_HEADER COLON DIGIT

State 25:
## Known stack suffix:
## inputsymbols stacksymbols states initialstate
## LR(1) items:
declarations -> inputsymbols stacksymbols states initialstate . initialstack [ TRANSITIONS_HEADER PROGRAM_HEADER ]
## Transitions:
-- On INIT_STACK_HEADER shift to state 26
-- On initialstack shift to state 29
## Reductions:

State 26:
## Known stack suffix:
## INIT_STACK_HEADER
## LR(1) items:
initialstack -> INIT_STACK_HEADER . COLON UC_LETTER [ TRANSITIONS_HEADER PROGRAM_HEADER ]
## Transitions:
-- On COLON shift to state 27
## Reductions:

State 27:
## Known stack suffix:
## INIT_STACK_HEADER COLON
## LR(1) items:
initialstack -> INIT_STACK_HEADER COLON . UC_LETTER [ TRANSITIONS_HEADER PROGRAM_HEADER ]
## Transitions:
-- On UC_LETTER shift to state 28
## Reductions:

State 28:
## Known stack suffix:
## INIT_STACK_HEADER COLON UC_LETTER
## LR(1) items:
initialstack -> INIT_STACK_HEADER COLON UC_LETTER . [ TRANSITIONS_HEADER PROGRAM_HEADER ]
## Transitions:
## Reductions:
-- On TRANSITIONS_HEADER PROGRAM_HEADER
--   reduce production initialstack -> INIT_STACK_HEADER COLON UC_LETTER

State 29:
## Known stack suffix:
## inputsymbols stacksymbols states initialstate initialstack
## LR(1) items:
declarations -> inputsymbols stacksymbols states initialstate initialstack . [ TRANSITIONS_HEADER PROGRAM_HEADER ]
## Transitions:
## Reductions:
-- On TRANSITIONS_HEADER PROGRAM_HEADER
--   reduce production declarations -> inputsymbols stacksymbols states initialstate initialstack

State 30:
## Known stack suffix:
## declarations
## LR(1) items:
automaton -> declarations . transitions EOF [ # ]
automaton -> declarations . program EOF [ # ]
## Transitions:
-- On TRANSITIONS_HEADER shift to state 31
-- On PROGRAM_HEADER shift to state 52
-- On transitions shift to state 153
-- On program shift to state 155
## Reductions:

State 31:
## Known stack suffix:
## TRANSITIONS_HEADER
## LR(1) items:
transitions -> TRANSITIONS_HEADER . COLON translist [ EOF ]
## Transitions:
-- On COLON shift to state 32
## Reductions:

State 32:
## Known stack suffix:
## TRANSITIONS_HEADER COLON
## LR(1) items:
transitions -> TRANSITIONS_HEADER COLON . translist [ EOF ]
## Transitions:
-- On LPARA shift to state 33
-- On translist shift to state 49
-- On transition shift to state 50
## Reductions:
-- On EOF
--   reduce production translist ->

State 33:
## Known stack suffix:
## LPARA
## LR(1) items:
transition -> LPARA . DIGIT COMMA minuscule_ou_vide COMMA UC_LETTER COMMA DIGIT COMMA stack RPARA [ LPARA EOF ]
## Transitions:
-- On DIGIT shift to state 34
## Reductions:

State 34:
## Known stack suffix:
## LPARA DIGIT
## LR(1) items:
transition -> LPARA DIGIT . COMMA minuscule_ou_vide COMMA UC_LETTER COMMA DIGIT COMMA stack RPARA [ LPARA EOF ]
## Transitions:
-- On COMMA shift to state 35
## Reductions:

State 35:
## Known stack suffix:
## LPARA DIGIT COMMA
## LR(1) items:
transition -> LPARA DIGIT COMMA . minuscule_ou_vide COMMA UC_LETTER COMMA DIGIT COMMA stack RPARA [ LPARA EOF ]
## Transitions:
-- On LC_LETTER shift to state 36
-- On minuscule_ou_vide shift to state 37
## Reductions:
-- On COMMA
--   reduce production minuscule_ou_vide ->

State 36:
## Known stack suffix:
## LC_LETTER
## LR(1) items:
minuscule_ou_vide -> LC_LETTER . [ COMMA ]
## Transitions:
## Reductions:
-- On COMMA
--   reduce production minuscule_ou_vide -> LC_LETTER

State 37:
## Known stack suffix:
## LPARA DIGIT COMMA minuscule_ou_vide
## LR(1) items:
transition -> LPARA DIGIT COMMA minuscule_ou_vide . COMMA UC_LETTER COMMA DIGIT COMMA stack RPARA [ LPARA EOF ]
## Transitions:
-- On COMMA shift to state 38
## Reductions:

State 38:
## Known stack suffix:
## LPARA DIGIT COMMA minuscule_ou_vide COMMA
## LR(1) items:
transition -> LPARA DIGIT COMMA minuscule_ou_vide COMMA . UC_LETTER COMMA DIGIT COMMA stack RPARA [ LPARA EOF ]
## Transitions:
-- On UC_LETTER shift to state 39
## Reductions:

State 39:
## Known stack suffix:
## LPARA DIGIT COMMA minuscule_ou_vide COMMA UC_LETTER
## LR(1) items:
transition -> LPARA DIGIT COMMA minuscule_ou_vide COMMA UC_LETTER . COMMA DIGIT COMMA stack RPARA [ LPARA EOF ]
## Transitions:
-- On COMMA shift to state 40
## Reductions:

State 40:
## Known stack suffix:
## LPARA DIGIT COMMA minuscule_ou_vide COMMA UC_LETTER COMMA
## LR(1) items:
transition -> LPARA DIGIT COMMA minuscule_ou_vide COMMA UC_LETTER COMMA . DIGIT COMMA stack RPARA [ LPARA EOF ]
## Transitions:
-- On DIGIT shift to state 41
## Reductions:

State 41:
## Known stack suffix:
## LPARA DIGIT COMMA minuscule_ou_vide COMMA UC_LETTER COMMA DIGIT
## LR(1) items:
transition -> LPARA DIGIT COMMA minuscule_ou_vide COMMA UC_LETTER COMMA DIGIT . COMMA stack RPARA [ LPARA EOF ]
## Transitions:
-- On COMMA shift to state 42
## Reductions:

State 42:
## Known stack suffix:
## LPARA DIGIT COMMA minuscule_ou_vide COMMA UC_LETTER COMMA DIGIT COMMA
## LR(1) items:
transition -> LPARA DIGIT COMMA minuscule_ou_vide COMMA UC_LETTER COMMA DIGIT COMMA . stack RPARA [ LPARA EOF ]
## Transitions:
-- On UC_LETTER shift to state 43
-- On stack shift to state 46
-- On nonemptystack shift to state 48
## Reductions:
-- On RPARA
--   reduce production stack ->

State 43:
## Known stack suffix:
## UC_LETTER
## LR(1) items:
nonemptystack -> UC_LETTER . [ RPARA ]
nonemptystack -> UC_LETTER . SEMICOLON nonemptystack [ RPARA ]
## Transitions:
-- On SEMICOLON shift to state 44
## Reductions:
-- On RPARA
--   reduce production nonemptystack -> UC_LETTER

State 44:
## Known stack suffix:
## UC_LETTER SEMICOLON
## LR(1) items:
nonemptystack -> UC_LETTER SEMICOLON . nonemptystack [ RPARA ]
## Transitions:
-- On UC_LETTER shift to state 43
-- On nonemptystack shift to state 45
## Reductions:

State 45:
## Known stack suffix:
## UC_LETTER SEMICOLON nonemptystack
## LR(1) items:
nonemptystack -> UC_LETTER SEMICOLON nonemptystack . [ RPARA ]
## Transitions:
## Reductions:
-- On RPARA
--   reduce production nonemptystack -> UC_LETTER SEMICOLON nonemptystack

State 46:
## Known stack suffix:
## LPARA DIGIT COMMA minuscule_ou_vide COMMA UC_LETTER COMMA DIGIT COMMA stack
## LR(1) items:
transition -> LPARA DIGIT COMMA minuscule_ou_vide COMMA UC_LETTER COMMA DIGIT COMMA stack . RPARA [ LPARA EOF ]
## Transitions:
-- On RPARA shift to state 47
## Reductions:

State 47:
## Known stack suffix:
## LPARA DIGIT COMMA minuscule_ou_vide COMMA UC_LETTER COMMA DIGIT COMMA stack RPARA
## LR(1) items:
transition -> LPARA DIGIT COMMA minuscule_ou_vide COMMA UC_LETTER COMMA DIGIT COMMA stack RPARA . [ LPARA EOF ]
## Transitions:
## Reductions:
-- On LPARA EOF
--   reduce production transition -> LPARA DIGIT COMMA minuscule_ou_vide COMMA UC_LETTER COMMA DIGIT COMMA stack RPARA

State 48:
## Known stack suffix:
## nonemptystack
## LR(1) items:
stack -> nonemptystack . [ RPARA ]
## Transitions:
## Reductions:
-- On RPARA
--   reduce production stack -> nonemptystack

State 49:
## Known stack suffix:
## TRANSITIONS_HEADER COLON translist
## LR(1) items:
transitions -> TRANSITIONS_HEADER COLON translist . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production transitions -> TRANSITIONS_HEADER COLON translist

State 50:
## Known stack suffix:
## transition
## LR(1) items:
translist -> transition . translist [ EOF ]
## Transitions:
-- On LPARA shift to state 33
-- On translist shift to state 51
-- On transition shift to state 50
## Reductions:
-- On EOF
--   reduce production translist ->

State 51:
## Known stack suffix:
## transition translist
## LR(1) items:
translist -> transition translist . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production translist -> transition translist

State 52:
## Known stack suffix:
## PROGRAM_HEADER
## LR(1) items:
program -> PROGRAM_HEADER . COLON case_block [ EOF ]
## Transitions:
-- On COLON shift to state 53
## Reductions:

State 53:
## Known stack suffix:
## PROGRAM_HEADER COLON
## LR(1) items:
program -> PROGRAM_HEADER COLON . case_block [ EOF ]
## Transitions:
-- On CASE shift to state 54
-- On case_block shift to state 152
## Reductions:

State 54:
## Known stack suffix:
## CASE
## LR(1) items:
case_block -> CASE . STATE OF state_cases [ EOF ]
case_block -> CASE . NEXT OF stream_cases [ EOF ]
case_block -> CASE . TOP OF stack_cases [ EOF ]
## Transitions:
-- On TOP shift to state 55
-- On STATE shift to state 120
-- On NEXT shift to state 136
## Reductions:

State 55:
## Known stack suffix:
## CASE TOP
## LR(1) items:
case_block -> CASE TOP . OF stack_cases [ EOF ]
## Transitions:
-- On OF shift to state 56
## Reductions:

State 56:
## Known stack suffix:
## CASE TOP OF
## LR(1) items:
case_block -> CASE TOP OF . stack_cases [ EOF ]
## Transitions:
-- On UC_LETTER shift to state 57
-- On stack_cases shift to state 119
## Reductions:
-- On EOF
--   reduce production stack_cases ->

State 57:
## Known stack suffix:
## UC_LETTER
## LR(1) items:
stack_cases -> UC_LETTER . COLON op stack_cases [ EOF ]
## Transitions:
-- On COLON shift to state 58
## Reductions:

State 58:
## Known stack suffix:
## UC_LETTER COLON
## LR(1) items:
stack_cases -> UC_LETTER COLON . op stack_cases [ EOF ]
## Transitions:
-- On REJECT shift to state 59
-- On PUSH shift to state 60
-- On POP shift to state 62
-- On CHANGE shift to state 63
-- On BEGIN shift to state 65
-- On op shift to state 117
## Reductions:

State 59:
## Known stack suffix:
## REJECT
## LR(1) items:
op -> REJECT . [ UC_LETTER EOF ]
## Transitions:
## Reductions:
-- On UC_LETTER EOF
--   reduce production op -> REJECT

State 60:
## Known stack suffix:
## PUSH
## LR(1) items:
op -> PUSH . UC_LETTER [ UC_LETTER EOF ]
## Transitions:
-- On UC_LETTER shift to state 61
## Reductions:

State 61:
## Known stack suffix:
## PUSH UC_LETTER
## LR(1) items:
op -> PUSH UC_LETTER . [ UC_LETTER EOF ]
## Transitions:
## Reductions:
-- On UC_LETTER EOF
--   reduce production op -> PUSH UC_LETTER

State 62:
## Known stack suffix:
## POP
## LR(1) items:
op -> POP . [ UC_LETTER EOF ]
## Transitions:
## Reductions:
-- On UC_LETTER EOF
--   reduce production op -> POP

State 63:
## Known stack suffix:
## CHANGE
## LR(1) items:
op -> CHANGE . DIGIT [ UC_LETTER EOF ]
## Transitions:
-- On DIGIT shift to state 64
## Reductions:

State 64:
## Known stack suffix:
## CHANGE DIGIT
## LR(1) items:
op -> CHANGE DIGIT . [ UC_LETTER EOF ]
## Transitions:
## Reductions:
-- On UC_LETTER EOF
--   reduce production op -> CHANGE DIGIT

State 65:
## Known stack suffix:
## BEGIN
## LR(1) items:
op -> BEGIN . case_block END [ UC_LETTER EOF ]
## Transitions:
-- On CASE shift to state 66
-- On case_block shift to state 115
## Reductions:

State 66:
## Known stack suffix:
## CASE
## LR(1) items:
case_block -> CASE . STATE OF state_cases [ END ]
case_block -> CASE . NEXT OF stream_cases [ END ]
case_block -> CASE . TOP OF stack_cases [ END ]
## Transitions:
-- On TOP shift to state 67
-- On STATE shift to state 83
-- On NEXT shift to state 99
## Reductions:

State 67:
## Known stack suffix:
## CASE TOP
## LR(1) items:
case_block -> CASE TOP . OF stack_cases [ END ]
## Transitions:
-- On OF shift to state 68
## Reductions:

State 68:
## Known stack suffix:
## CASE TOP OF
## LR(1) items:
case_block -> CASE TOP OF . stack_cases [ END ]
## Transitions:
-- On UC_LETTER shift to state 69
-- On stack_cases shift to state 82
## Reductions:
-- On END
--   reduce production stack_cases ->

State 69:
## Known stack suffix:
## UC_LETTER
## LR(1) items:
stack_cases -> UC_LETTER . COLON op stack_cases [ END ]
## Transitions:
-- On COLON shift to state 70
## Reductions:

State 70:
## Known stack suffix:
## UC_LETTER COLON
## LR(1) items:
stack_cases -> UC_LETTER COLON . op stack_cases [ END ]
## Transitions:
-- On REJECT shift to state 71
-- On PUSH shift to state 72
-- On POP shift to state 74
-- On CHANGE shift to state 75
-- On BEGIN shift to state 77
-- On op shift to state 80
## Reductions:

State 71:
## Known stack suffix:
## REJECT
## LR(1) items:
op -> REJECT . [ UC_LETTER END ]
## Transitions:
## Reductions:
-- On UC_LETTER END
--   reduce production op -> REJECT

State 72:
## Known stack suffix:
## PUSH
## LR(1) items:
op -> PUSH . UC_LETTER [ UC_LETTER END ]
## Transitions:
-- On UC_LETTER shift to state 73
## Reductions:

State 73:
## Known stack suffix:
## PUSH UC_LETTER
## LR(1) items:
op -> PUSH UC_LETTER . [ UC_LETTER END ]
## Transitions:
## Reductions:
-- On UC_LETTER END
--   reduce production op -> PUSH UC_LETTER

State 74:
## Known stack suffix:
## POP
## LR(1) items:
op -> POP . [ UC_LETTER END ]
## Transitions:
## Reductions:
-- On UC_LETTER END
--   reduce production op -> POP

State 75:
## Known stack suffix:
## CHANGE
## LR(1) items:
op -> CHANGE . DIGIT [ UC_LETTER END ]
## Transitions:
-- On DIGIT shift to state 76
## Reductions:

State 76:
## Known stack suffix:
## CHANGE DIGIT
## LR(1) items:
op -> CHANGE DIGIT . [ UC_LETTER END ]
## Transitions:
## Reductions:
-- On UC_LETTER END
--   reduce production op -> CHANGE DIGIT

State 77:
## Known stack suffix:
## BEGIN
## LR(1) items:
op -> BEGIN . case_block END [ UC_LETTER END ]
## Transitions:
-- On CASE shift to state 66
-- On case_block shift to state 78
## Reductions:

State 78:
## Known stack suffix:
## BEGIN case_block
## LR(1) items:
op -> BEGIN case_block . END [ UC_LETTER END ]
## Transitions:
-- On END shift to state 79
## Reductions:

State 79:
## Known stack suffix:
## BEGIN case_block END
## LR(1) items:
op -> BEGIN case_block END . [ UC_LETTER END ]
## Transitions:
## Reductions:
-- On UC_LETTER END
--   reduce production op -> BEGIN case_block END

State 80:
## Known stack suffix:
## UC_LETTER COLON op
## LR(1) items:
stack_cases -> UC_LETTER COLON op . stack_cases [ END ]
## Transitions:
-- On UC_LETTER shift to state 69
-- On stack_cases shift to state 81
## Reductions:
-- On END
--   reduce production stack_cases ->

State 81:
## Known stack suffix:
## UC_LETTER COLON op stack_cases
## LR(1) items:
stack_cases -> UC_LETTER COLON op stack_cases . [ END ]
## Transitions:
## Reductions:
-- On END
--   reduce production stack_cases -> UC_LETTER COLON op stack_cases

State 82:
## Known stack suffix:
## CASE TOP OF stack_cases
## LR(1) items:
case_block -> CASE TOP OF stack_cases . [ END ]
## Transitions:
## Reductions:
-- On END
--   reduce production case_block -> CASE TOP OF stack_cases

State 83:
## Known stack suffix:
## CASE STATE
## LR(1) items:
case_block -> CASE STATE . OF state_cases [ END ]
## Transitions:
-- On OF shift to state 84
## Reductions:

State 84:
## Known stack suffix:
## CASE STATE OF
## LR(1) items:
case_block -> CASE STATE OF . state_cases [ END ]
## Transitions:
-- On DIGIT shift to state 85
-- On state_cases shift to state 98
## Reductions:
-- On END
--   reduce production state_cases ->

State 85:
## Known stack suffix:
## DIGIT
## LR(1) items:
state_cases -> DIGIT . COLON op state_cases [ END ]
## Transitions:
-- On COLON shift to state 86
## Reductions:

State 86:
## Known stack suffix:
## DIGIT COLON
## LR(1) items:
state_cases -> DIGIT COLON . op state_cases [ END ]
## Transitions:
-- On REJECT shift to state 87
-- On PUSH shift to state 88
-- On POP shift to state 90
-- On CHANGE shift to state 91
-- On BEGIN shift to state 93
-- On op shift to state 96
## Reductions:

State 87:
## Known stack suffix:
## REJECT
## LR(1) items:
op -> REJECT . [ END DIGIT ]
## Transitions:
## Reductions:
-- On END DIGIT
--   reduce production op -> REJECT

State 88:
## Known stack suffix:
## PUSH
## LR(1) items:
op -> PUSH . UC_LETTER [ END DIGIT ]
## Transitions:
-- On UC_LETTER shift to state 89
## Reductions:

State 89:
## Known stack suffix:
## PUSH UC_LETTER
## LR(1) items:
op -> PUSH UC_LETTER . [ END DIGIT ]
## Transitions:
## Reductions:
-- On END DIGIT
--   reduce production op -> PUSH UC_LETTER

State 90:
## Known stack suffix:
## POP
## LR(1) items:
op -> POP . [ END DIGIT ]
## Transitions:
## Reductions:
-- On END DIGIT
--   reduce production op -> POP

State 91:
## Known stack suffix:
## CHANGE
## LR(1) items:
op -> CHANGE . DIGIT [ END DIGIT ]
## Transitions:
-- On DIGIT shift to state 92
## Reductions:

State 92:
## Known stack suffix:
## CHANGE DIGIT
## LR(1) items:
op -> CHANGE DIGIT . [ END DIGIT ]
## Transitions:
## Reductions:
-- On END DIGIT
--   reduce production op -> CHANGE DIGIT

State 93:
## Known stack suffix:
## BEGIN
## LR(1) items:
op -> BEGIN . case_block END [ END DIGIT ]
## Transitions:
-- On CASE shift to state 66
-- On case_block shift to state 94
## Reductions:

State 94:
## Known stack suffix:
## BEGIN case_block
## LR(1) items:
op -> BEGIN case_block . END [ END DIGIT ]
## Transitions:
-- On END shift to state 95
## Reductions:

State 95:
## Known stack suffix:
## BEGIN case_block END
## LR(1) items:
op -> BEGIN case_block END . [ END DIGIT ]
## Transitions:
## Reductions:
-- On END DIGIT
--   reduce production op -> BEGIN case_block END

State 96:
## Known stack suffix:
## DIGIT COLON op
## LR(1) items:
state_cases -> DIGIT COLON op . state_cases [ END ]
## Transitions:
-- On DIGIT shift to state 85
-- On state_cases shift to state 97
## Reductions:
-- On END
--   reduce production state_cases ->

State 97:
## Known stack suffix:
## DIGIT COLON op state_cases
## LR(1) items:
state_cases -> DIGIT COLON op state_cases . [ END ]
## Transitions:
## Reductions:
-- On END
--   reduce production state_cases -> DIGIT COLON op state_cases

State 98:
## Known stack suffix:
## CASE STATE OF state_cases
## LR(1) items:
case_block -> CASE STATE OF state_cases . [ END ]
## Transitions:
## Reductions:
-- On END
--   reduce production case_block -> CASE STATE OF state_cases

State 99:
## Known stack suffix:
## CASE NEXT
## LR(1) items:
case_block -> CASE NEXT . OF stream_cases [ END ]
## Transitions:
-- On OF shift to state 100
## Reductions:

State 100:
## Known stack suffix:
## CASE NEXT OF
## LR(1) items:
case_block -> CASE NEXT OF . stream_cases [ END ]
## Transitions:
-- On LC_LETTER shift to state 101
-- On stream_cases shift to state 114
## Reductions:
-- On END
--   reduce production stream_cases ->

State 101:
## Known stack suffix:
## LC_LETTER
## LR(1) items:
stream_cases -> LC_LETTER . COLON op stream_cases [ END ]
## Transitions:
-- On COLON shift to state 102
## Reductions:

State 102:
## Known stack suffix:
## LC_LETTER COLON
## LR(1) items:
stream_cases -> LC_LETTER COLON . op stream_cases [ END ]
## Transitions:
-- On REJECT shift to state 103
-- On PUSH shift to state 104
-- On POP shift to state 106
-- On CHANGE shift to state 107
-- On BEGIN shift to state 109
-- On op shift to state 112
## Reductions:

State 103:
## Known stack suffix:
## REJECT
## LR(1) items:
op -> REJECT . [ LC_LETTER END ]
## Transitions:
## Reductions:
-- On LC_LETTER END
--   reduce production op -> REJECT

State 104:
## Known stack suffix:
## PUSH
## LR(1) items:
op -> PUSH . UC_LETTER [ LC_LETTER END ]
## Transitions:
-- On UC_LETTER shift to state 105
## Reductions:

State 105:
## Known stack suffix:
## PUSH UC_LETTER
## LR(1) items:
op -> PUSH UC_LETTER . [ LC_LETTER END ]
## Transitions:
## Reductions:
-- On LC_LETTER END
--   reduce production op -> PUSH UC_LETTER

State 106:
## Known stack suffix:
## POP
## LR(1) items:
op -> POP . [ LC_LETTER END ]
## Transitions:
## Reductions:
-- On LC_LETTER END
--   reduce production op -> POP

State 107:
## Known stack suffix:
## CHANGE
## LR(1) items:
op -> CHANGE . DIGIT [ LC_LETTER END ]
## Transitions:
-- On DIGIT shift to state 108
## Reductions:

State 108:
## Known stack suffix:
## CHANGE DIGIT
## LR(1) items:
op -> CHANGE DIGIT . [ LC_LETTER END ]
## Transitions:
## Reductions:
-- On LC_LETTER END
--   reduce production op -> CHANGE DIGIT

State 109:
## Known stack suffix:
## BEGIN
## LR(1) items:
op -> BEGIN . case_block END [ LC_LETTER END ]
## Transitions:
-- On CASE shift to state 66
-- On case_block shift to state 110
## Reductions:

State 110:
## Known stack suffix:
## BEGIN case_block
## LR(1) items:
op -> BEGIN case_block . END [ LC_LETTER END ]
## Transitions:
-- On END shift to state 111
## Reductions:

State 111:
## Known stack suffix:
## BEGIN case_block END
## LR(1) items:
op -> BEGIN case_block END . [ LC_LETTER END ]
## Transitions:
## Reductions:
-- On LC_LETTER END
--   reduce production op -> BEGIN case_block END

State 112:
## Known stack suffix:
## LC_LETTER COLON op
## LR(1) items:
stream_cases -> LC_LETTER COLON op . stream_cases [ END ]
## Transitions:
-- On LC_LETTER shift to state 101
-- On stream_cases shift to state 113
## Reductions:
-- On END
--   reduce production stream_cases ->

State 113:
## Known stack suffix:
## LC_LETTER COLON op stream_cases
## LR(1) items:
stream_cases -> LC_LETTER COLON op stream_cases . [ END ]
## Transitions:
## Reductions:
-- On END
--   reduce production stream_cases -> LC_LETTER COLON op stream_cases

State 114:
## Known stack suffix:
## CASE NEXT OF stream_cases
## LR(1) items:
case_block -> CASE NEXT OF stream_cases . [ END ]
## Transitions:
## Reductions:
-- On END
--   reduce production case_block -> CASE NEXT OF stream_cases

State 115:
## Known stack suffix:
## BEGIN case_block
## LR(1) items:
op -> BEGIN case_block . END [ UC_LETTER EOF ]
## Transitions:
-- On END shift to state 116
## Reductions:

State 116:
## Known stack suffix:
## BEGIN case_block END
## LR(1) items:
op -> BEGIN case_block END . [ UC_LETTER EOF ]
## Transitions:
## Reductions:
-- On UC_LETTER EOF
--   reduce production op -> BEGIN case_block END

State 117:
## Known stack suffix:
## UC_LETTER COLON op
## LR(1) items:
stack_cases -> UC_LETTER COLON op . stack_cases [ EOF ]
## Transitions:
-- On UC_LETTER shift to state 57
-- On stack_cases shift to state 118
## Reductions:
-- On EOF
--   reduce production stack_cases ->

State 118:
## Known stack suffix:
## UC_LETTER COLON op stack_cases
## LR(1) items:
stack_cases -> UC_LETTER COLON op stack_cases . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production stack_cases -> UC_LETTER COLON op stack_cases

State 119:
## Known stack suffix:
## CASE TOP OF stack_cases
## LR(1) items:
case_block -> CASE TOP OF stack_cases . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production case_block -> CASE TOP OF stack_cases

State 120:
## Known stack suffix:
## CASE STATE
## LR(1) items:
case_block -> CASE STATE . OF state_cases [ EOF ]
## Transitions:
-- On OF shift to state 121
## Reductions:

State 121:
## Known stack suffix:
## CASE STATE OF
## LR(1) items:
case_block -> CASE STATE OF . state_cases [ EOF ]
## Transitions:
-- On DIGIT shift to state 122
-- On state_cases shift to state 135
## Reductions:
-- On EOF
--   reduce production state_cases ->

State 122:
## Known stack suffix:
## DIGIT
## LR(1) items:
state_cases -> DIGIT . COLON op state_cases [ EOF ]
## Transitions:
-- On COLON shift to state 123
## Reductions:

State 123:
## Known stack suffix:
## DIGIT COLON
## LR(1) items:
state_cases -> DIGIT COLON . op state_cases [ EOF ]
## Transitions:
-- On REJECT shift to state 124
-- On PUSH shift to state 125
-- On POP shift to state 127
-- On CHANGE shift to state 128
-- On BEGIN shift to state 130
-- On op shift to state 133
## Reductions:

State 124:
## Known stack suffix:
## REJECT
## LR(1) items:
op -> REJECT . [ EOF DIGIT ]
## Transitions:
## Reductions:
-- On EOF DIGIT
--   reduce production op -> REJECT

State 125:
## Known stack suffix:
## PUSH
## LR(1) items:
op -> PUSH . UC_LETTER [ EOF DIGIT ]
## Transitions:
-- On UC_LETTER shift to state 126
## Reductions:

State 126:
## Known stack suffix:
## PUSH UC_LETTER
## LR(1) items:
op -> PUSH UC_LETTER . [ EOF DIGIT ]
## Transitions:
## Reductions:
-- On EOF DIGIT
--   reduce production op -> PUSH UC_LETTER

State 127:
## Known stack suffix:
## POP
## LR(1) items:
op -> POP . [ EOF DIGIT ]
## Transitions:
## Reductions:
-- On EOF DIGIT
--   reduce production op -> POP

State 128:
## Known stack suffix:
## CHANGE
## LR(1) items:
op -> CHANGE . DIGIT [ EOF DIGIT ]
## Transitions:
-- On DIGIT shift to state 129
## Reductions:

State 129:
## Known stack suffix:
## CHANGE DIGIT
## LR(1) items:
op -> CHANGE DIGIT . [ EOF DIGIT ]
## Transitions:
## Reductions:
-- On EOF DIGIT
--   reduce production op -> CHANGE DIGIT

State 130:
## Known stack suffix:
## BEGIN
## LR(1) items:
op -> BEGIN . case_block END [ EOF DIGIT ]
## Transitions:
-- On CASE shift to state 66
-- On case_block shift to state 131
## Reductions:

State 131:
## Known stack suffix:
## BEGIN case_block
## LR(1) items:
op -> BEGIN case_block . END [ EOF DIGIT ]
## Transitions:
-- On END shift to state 132
## Reductions:

State 132:
## Known stack suffix:
## BEGIN case_block END
## LR(1) items:
op -> BEGIN case_block END . [ EOF DIGIT ]
## Transitions:
## Reductions:
-- On EOF DIGIT
--   reduce production op -> BEGIN case_block END

State 133:
## Known stack suffix:
## DIGIT COLON op
## LR(1) items:
state_cases -> DIGIT COLON op . state_cases [ EOF ]
## Transitions:
-- On DIGIT shift to state 122
-- On state_cases shift to state 134
## Reductions:
-- On EOF
--   reduce production state_cases ->

State 134:
## Known stack suffix:
## DIGIT COLON op state_cases
## LR(1) items:
state_cases -> DIGIT COLON op state_cases . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production state_cases -> DIGIT COLON op state_cases

State 135:
## Known stack suffix:
## CASE STATE OF state_cases
## LR(1) items:
case_block -> CASE STATE OF state_cases . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production case_block -> CASE STATE OF state_cases

State 136:
## Known stack suffix:
## CASE NEXT
## LR(1) items:
case_block -> CASE NEXT . OF stream_cases [ EOF ]
## Transitions:
-- On OF shift to state 137
## Reductions:

State 137:
## Known stack suffix:
## CASE NEXT OF
## LR(1) items:
case_block -> CASE NEXT OF . stream_cases [ EOF ]
## Transitions:
-- On LC_LETTER shift to state 138
-- On stream_cases shift to state 151
## Reductions:
-- On EOF
--   reduce production stream_cases ->

State 138:
## Known stack suffix:
## LC_LETTER
## LR(1) items:
stream_cases -> LC_LETTER . COLON op stream_cases [ EOF ]
## Transitions:
-- On COLON shift to state 139
## Reductions:

State 139:
## Known stack suffix:
## LC_LETTER COLON
## LR(1) items:
stream_cases -> LC_LETTER COLON . op stream_cases [ EOF ]
## Transitions:
-- On REJECT shift to state 140
-- On PUSH shift to state 141
-- On POP shift to state 143
-- On CHANGE shift to state 144
-- On BEGIN shift to state 146
-- On op shift to state 149
## Reductions:

State 140:
## Known stack suffix:
## REJECT
## LR(1) items:
op -> REJECT . [ LC_LETTER EOF ]
## Transitions:
## Reductions:
-- On LC_LETTER EOF
--   reduce production op -> REJECT

State 141:
## Known stack suffix:
## PUSH
## LR(1) items:
op -> PUSH . UC_LETTER [ LC_LETTER EOF ]
## Transitions:
-- On UC_LETTER shift to state 142
## Reductions:

State 142:
## Known stack suffix:
## PUSH UC_LETTER
## LR(1) items:
op -> PUSH UC_LETTER . [ LC_LETTER EOF ]
## Transitions:
## Reductions:
-- On LC_LETTER EOF
--   reduce production op -> PUSH UC_LETTER

State 143:
## Known stack suffix:
## POP
## LR(1) items:
op -> POP . [ LC_LETTER EOF ]
## Transitions:
## Reductions:
-- On LC_LETTER EOF
--   reduce production op -> POP

State 144:
## Known stack suffix:
## CHANGE
## LR(1) items:
op -> CHANGE . DIGIT [ LC_LETTER EOF ]
## Transitions:
-- On DIGIT shift to state 145
## Reductions:

State 145:
## Known stack suffix:
## CHANGE DIGIT
## LR(1) items:
op -> CHANGE DIGIT . [ LC_LETTER EOF ]
## Transitions:
## Reductions:
-- On LC_LETTER EOF
--   reduce production op -> CHANGE DIGIT

State 146:
## Known stack suffix:
## BEGIN
## LR(1) items:
op -> BEGIN . case_block END [ LC_LETTER EOF ]
## Transitions:
-- On CASE shift to state 66
-- On case_block shift to state 147
## Reductions:

State 147:
## Known stack suffix:
## BEGIN case_block
## LR(1) items:
op -> BEGIN case_block . END [ LC_LETTER EOF ]
## Transitions:
-- On END shift to state 148
## Reductions:

State 148:
## Known stack suffix:
## BEGIN case_block END
## LR(1) items:
op -> BEGIN case_block END . [ LC_LETTER EOF ]
## Transitions:
## Reductions:
-- On LC_LETTER EOF
--   reduce production op -> BEGIN case_block END

State 149:
## Known stack suffix:
## LC_LETTER COLON op
## LR(1) items:
stream_cases -> LC_LETTER COLON op . stream_cases [ EOF ]
## Transitions:
-- On LC_LETTER shift to state 138
-- On stream_cases shift to state 150
## Reductions:
-- On EOF
--   reduce production stream_cases ->

State 150:
## Known stack suffix:
## LC_LETTER COLON op stream_cases
## LR(1) items:
stream_cases -> LC_LETTER COLON op stream_cases . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production stream_cases -> LC_LETTER COLON op stream_cases

State 151:
## Known stack suffix:
## CASE NEXT OF stream_cases
## LR(1) items:
case_block -> CASE NEXT OF stream_cases . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production case_block -> CASE NEXT OF stream_cases

State 152:
## Known stack suffix:
## PROGRAM_HEADER COLON case_block
## LR(1) items:
program -> PROGRAM_HEADER COLON case_block . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production program -> PROGRAM_HEADER COLON case_block

State 153:
## Known stack suffix:
## declarations transitions
## LR(1) items:
automaton -> declarations transitions . EOF [ # ]
## Transitions:
-- On EOF shift to state 154
## Reductions:

State 154:
## Known stack suffix:
## declarations transitions EOF
## LR(1) items:
automaton -> declarations transitions EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production automaton -> declarations transitions EOF

State 155:
## Known stack suffix:
## declarations program
## LR(1) items:
automaton -> declarations program . EOF [ # ]
## Transitions:
-- On EOF shift to state 156
## Reductions:

State 156:
## Known stack suffix:
## declarations program EOF
## LR(1) items:
automaton -> declarations program EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production automaton -> declarations program EOF

State 157:
## Known stack suffix:
## automaton
## LR(1) items:
automaton' -> automaton . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept automaton

