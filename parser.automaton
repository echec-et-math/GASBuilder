State 0:
automate' -> . automate [ # ]
-- On INPUT_SYMBOLS_HEADER shift to state 1
-- On inputsymbols shift to state 7
-- On declarations shift to state 24
-- On automate shift to state 48

State 1:
inputsymbols -> INPUT_SYMBOLS_HEADER . COLON suitelettres_nonvide [ STACK_SYMBOLS_HEADER ]
-- On COLON shift to state 2

State 2:
inputsymbols -> INPUT_SYMBOLS_HEADER COLON . suitelettres_nonvide [ STACK_SYMBOLS_HEADER ]
-- On LETTRE shift to state 3
-- On suitelettres_nonvide shift to state 6

State 3:
suitelettres_nonvide -> LETTRE . [ STATES_HEADER STACK_SYMBOLS_HEADER INIT_STATE_HEADER ]
suitelettres_nonvide -> LETTRE . COMMA suitelettres_nonvide [ STATES_HEADER STACK_SYMBOLS_HEADER INIT_STATE_HEADER ]
-- On COMMA shift to state 4
-- On STATES_HEADER reduce production suitelettres_nonvide -> LETTRE 
-- On STACK_SYMBOLS_HEADER reduce production suitelettres_nonvide -> LETTRE 
-- On INIT_STATE_HEADER reduce production suitelettres_nonvide -> LETTRE 

State 4:
suitelettres_nonvide -> LETTRE COMMA . suitelettres_nonvide [ STATES_HEADER STACK_SYMBOLS_HEADER INIT_STATE_HEADER ]
-- On LETTRE shift to state 3
-- On suitelettres_nonvide shift to state 5

State 5:
suitelettres_nonvide -> LETTRE COMMA suitelettres_nonvide . [ STATES_HEADER STACK_SYMBOLS_HEADER INIT_STATE_HEADER ]
-- On STATES_HEADER reduce production suitelettres_nonvide -> LETTRE COMMA suitelettres_nonvide 
-- On STACK_SYMBOLS_HEADER reduce production suitelettres_nonvide -> LETTRE COMMA suitelettres_nonvide 
-- On INIT_STATE_HEADER reduce production suitelettres_nonvide -> LETTRE COMMA suitelettres_nonvide 

State 6:
inputsymbols -> INPUT_SYMBOLS_HEADER COLON suitelettres_nonvide . [ STACK_SYMBOLS_HEADER ]
-- On STACK_SYMBOLS_HEADER reduce production inputsymbols -> INPUT_SYMBOLS_HEADER COLON suitelettres_nonvide 

State 7:
declarations -> inputsymbols . stacksymbols states initialstate initialstack [ TRANSITIONS_HEADER ]
-- On STACK_SYMBOLS_HEADER shift to state 8
-- On stacksymbols shift to state 11

State 8:
stacksymbols -> STACK_SYMBOLS_HEADER . COLON suitelettres_nonvide [ STATES_HEADER ]
-- On COLON shift to state 9

State 9:
stacksymbols -> STACK_SYMBOLS_HEADER COLON . suitelettres_nonvide [ STATES_HEADER ]
-- On LETTRE shift to state 3
-- On suitelettres_nonvide shift to state 10

State 10:
stacksymbols -> STACK_SYMBOLS_HEADER COLON suitelettres_nonvide . [ STATES_HEADER ]
-- On STATES_HEADER reduce production stacksymbols -> STACK_SYMBOLS_HEADER COLON suitelettres_nonvide 

State 11:
declarations -> inputsymbols stacksymbols . states initialstate initialstack [ TRANSITIONS_HEADER ]
-- On STATES_HEADER shift to state 12
-- On states shift to state 15

State 12:
states -> STATES_HEADER . COLON suitelettres_nonvide [ INIT_STATE_HEADER ]
-- On COLON shift to state 13

State 13:
states -> STATES_HEADER COLON . suitelettres_nonvide [ INIT_STATE_HEADER ]
-- On LETTRE shift to state 3
-- On suitelettres_nonvide shift to state 14

State 14:
states -> STATES_HEADER COLON suitelettres_nonvide . [ INIT_STATE_HEADER ]
-- On INIT_STATE_HEADER reduce production states -> STATES_HEADER COLON suitelettres_nonvide 

State 15:
declarations -> inputsymbols stacksymbols states . initialstate initialstack [ TRANSITIONS_HEADER ]
-- On INIT_STATE_HEADER shift to state 16
-- On initialstate shift to state 19

State 16:
initialstate -> INIT_STATE_HEADER . COLON LETTRE [ INIT_STACK_HEADER ]
-- On COLON shift to state 17

State 17:
initialstate -> INIT_STATE_HEADER COLON . LETTRE [ INIT_STACK_HEADER ]
-- On LETTRE shift to state 18

State 18:
initialstate -> INIT_STATE_HEADER COLON LETTRE . [ INIT_STACK_HEADER ]
-- On INIT_STACK_HEADER reduce production initialstate -> INIT_STATE_HEADER COLON LETTRE 

State 19:
declarations -> inputsymbols stacksymbols states initialstate . initialstack [ TRANSITIONS_HEADER ]
-- On INIT_STACK_HEADER shift to state 20
-- On initialstack shift to state 23

State 20:
initialstack -> INIT_STACK_HEADER . COLON LETTRE [ TRANSITIONS_HEADER ]
-- On COLON shift to state 21

State 21:
initialstack -> INIT_STACK_HEADER COLON . LETTRE [ TRANSITIONS_HEADER ]
-- On LETTRE shift to state 22

State 22:
initialstack -> INIT_STACK_HEADER COLON LETTRE . [ TRANSITIONS_HEADER ]
-- On TRANSITIONS_HEADER reduce production initialstack -> INIT_STACK_HEADER COLON LETTRE 

State 23:
declarations -> inputsymbols stacksymbols states initialstate initialstack . [ TRANSITIONS_HEADER ]
-- On TRANSITIONS_HEADER reduce production declarations -> inputsymbols stacksymbols states initialstate initialstack 

State 24:
automate -> declarations . transitions EOF [ # ]
-- On TRANSITIONS_HEADER shift to state 25
-- On transitions shift to state 46

State 25:
transitions -> TRANSITIONS_HEADER . COLON translist [ EOF ]
-- On COLON shift to state 26

State 26:
transitions -> TRANSITIONS_HEADER COLON . translist [ EOF ]
-- On LPARA shift to state 27
-- On translist shift to state 43
-- On transition shift to state 44
-- On EOF reduce production translist -> 

State 27:
transition -> LPARA . LETTRE COMMA lettre_ou_vide COMMA LETTRE COMMA LETTRE COMMA stack RPARA [ LPARA EOF ]
-- On LETTRE shift to state 28

State 28:
transition -> LPARA LETTRE . COMMA lettre_ou_vide COMMA LETTRE COMMA LETTRE COMMA stack RPARA [ LPARA EOF ]
-- On COMMA shift to state 29

State 29:
transition -> LPARA LETTRE COMMA . lettre_ou_vide COMMA LETTRE COMMA LETTRE COMMA stack RPARA [ LPARA EOF ]
-- On LETTRE shift to state 30
-- On lettre_ou_vide shift to state 31
-- On COMMA reduce production lettre_ou_vide -> 

State 30:
lettre_ou_vide -> LETTRE . [ COMMA ]
-- On COMMA reduce production lettre_ou_vide -> LETTRE 

State 31:
transition -> LPARA LETTRE COMMA lettre_ou_vide . COMMA LETTRE COMMA LETTRE COMMA stack RPARA [ LPARA EOF ]
-- On COMMA shift to state 32

State 32:
transition -> LPARA LETTRE COMMA lettre_ou_vide COMMA . LETTRE COMMA LETTRE COMMA stack RPARA [ LPARA EOF ]
-- On LETTRE shift to state 33

State 33:
transition -> LPARA LETTRE COMMA lettre_ou_vide COMMA LETTRE . COMMA LETTRE COMMA stack RPARA [ LPARA EOF ]
-- On COMMA shift to state 34

State 34:
transition -> LPARA LETTRE COMMA lettre_ou_vide COMMA LETTRE COMMA . LETTRE COMMA stack RPARA [ LPARA EOF ]
-- On LETTRE shift to state 35

State 35:
transition -> LPARA LETTRE COMMA lettre_ou_vide COMMA LETTRE COMMA LETTRE . COMMA stack RPARA [ LPARA EOF ]
-- On COMMA shift to state 36

State 36:
transition -> LPARA LETTRE COMMA lettre_ou_vide COMMA LETTRE COMMA LETTRE COMMA . stack RPARA [ LPARA EOF ]
-- On LETTRE shift to state 37
-- On stack shift to state 40
-- On nonemptystack shift to state 42
-- On RPARA reduce production stack -> 

State 37:
nonemptystack -> LETTRE . [ RPARA ]
nonemptystack -> LETTRE . SEMICOLON nonemptystack [ RPARA ]
-- On SEMICOLON shift to state 38
-- On RPARA reduce production nonemptystack -> LETTRE 

State 38:
nonemptystack -> LETTRE SEMICOLON . nonemptystack [ RPARA ]
-- On LETTRE shift to state 37
-- On nonemptystack shift to state 39

State 39:
nonemptystack -> LETTRE SEMICOLON nonemptystack . [ RPARA ]
-- On RPARA reduce production nonemptystack -> LETTRE SEMICOLON nonemptystack 

State 40:
transition -> LPARA LETTRE COMMA lettre_ou_vide COMMA LETTRE COMMA LETTRE COMMA stack . RPARA [ LPARA EOF ]
-- On RPARA shift to state 41

State 41:
transition -> LPARA LETTRE COMMA lettre_ou_vide COMMA LETTRE COMMA LETTRE COMMA stack RPARA . [ LPARA EOF ]
-- On LPARA reduce production transition -> LPARA LETTRE COMMA lettre_ou_vide COMMA LETTRE COMMA LETTRE COMMA stack RPARA 
-- On EOF reduce production transition -> LPARA LETTRE COMMA lettre_ou_vide COMMA LETTRE COMMA LETTRE COMMA stack RPARA 

State 42:
stack -> nonemptystack . [ RPARA ]
-- On RPARA reduce production stack -> nonemptystack 

State 43:
transitions -> TRANSITIONS_HEADER COLON translist . [ EOF ]
-- On EOF reduce production transitions -> TRANSITIONS_HEADER COLON translist 

State 44:
translist -> transition . translist [ EOF ]
-- On LPARA shift to state 27
-- On translist shift to state 45
-- On transition shift to state 44
-- On EOF reduce production translist -> 

State 45:
translist -> transition translist . [ EOF ]
-- On EOF reduce production translist -> transition translist 

State 46:
automate -> declarations transitions . EOF [ # ]
-- On EOF shift to state 47

State 47:
automate -> declarations transitions EOF . [ # ]
-- On # reduce production automate -> declarations transitions EOF 

State 48:
automate' -> automate . [ # ]
-- On # accept automate

