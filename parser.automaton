State 0:
## Known stack suffix:
##
## LR(1) items:
input' -> . input [ # ]
## Transitions:
-- On C shift to state 1
-- On B shift to state 2
-- On A shift to state 3
-- On input shift to state 8
-- On expression shift to state 9
## Reductions:

State 1:
## Known stack suffix:
## C
## LR(1) items:
expression -> C . [ EOF B A ]
## Transitions:
## Reductions:
-- On EOF B A
--   reduce production expression -> C

State 2:
## Known stack suffix:
## B
## LR(1) items:
expression -> B . expression B [ EOF B A ]
## Transitions:
-- On C shift to state 1
-- On B shift to state 2
-- On A shift to state 3
-- On expression shift to state 6
## Reductions:

State 3:
## Known stack suffix:
## A
## LR(1) items:
expression -> A . expression A [ EOF B A ]
## Transitions:
-- On C shift to state 1
-- On B shift to state 2
-- On A shift to state 3
-- On expression shift to state 4
## Reductions:

State 4:
## Known stack suffix:
## A expression
## LR(1) items:
expression -> A expression . A [ EOF B A ]
## Transitions:
-- On A shift to state 5
## Reductions:

State 5:
## Known stack suffix:
## A expression A
## LR(1) items:
expression -> A expression A . [ EOF B A ]
## Transitions:
## Reductions:
-- On EOF B A
--   reduce production expression -> A expression A

State 6:
## Known stack suffix:
## B expression
## LR(1) items:
expression -> B expression . B [ EOF B A ]
## Transitions:
-- On B shift to state 7
## Reductions:

State 7:
## Known stack suffix:
## B expression B
## LR(1) items:
expression -> B expression B . [ EOF B A ]
## Transitions:
## Reductions:
-- On EOF B A
--   reduce production expression -> B expression B

State 8:
## Known stack suffix:
## input
## LR(1) items:
input' -> input . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept input

State 9:
## Known stack suffix:
## expression
## LR(1) items:
input -> expression . EOF [ # ]
## Transitions:
-- On EOF shift to state 10
## Reductions:

State 10:
## Known stack suffix:
## expression EOF
## LR(1) items:
input -> expression EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production input -> expression EOF

